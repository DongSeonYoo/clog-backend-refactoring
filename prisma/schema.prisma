generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model accountMajor {
  accountIdx Int       @map("account_idx")
  majorIdx   Int       @map("major_idx") @db.SmallInt
  Account  account @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_account_major_tb")
  Major    major   @relation(fields: [majorIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_major_tb_to_account_major_tb")

  @@id([accountIdx, majorIdx])
  @@map("account_major_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model account {
  idx            Int              @id @default(autoincrement())
  email          String           @db.VarChar
  password       String           @db.Char(60)
  name           String           @db.VarChar
  admissionYear  Int              @map("admission_year") @db.SmallInt
  personalColor  String           @map("personal_color") @db.Char(6)
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamptz(6)
  AccountMajor accountMajor[]
  ClubMemeber   clubMember[]
  Comment      comment[]
  JoinRequest  joinRequest[]
  Post         post[]
  Reply        reply[]

  @@unique([email, deletedAt], map: "unique_email_deleted_at")
  @@map("account_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model belong {
  idx    Int      @id @default(autoincrement())
  name   String   @db.VarChar
  Club club[]

  @@map("belong_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bigCategory {
  idx    Int      @id @default(autoincrement())
  name   String   @db.VarChar
  Club club[]

  @@map("big_category_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model clubBoard {
  idx           Int             @id @default(autoincrement())
  clubIdx       Int             @map("club_idx")
  name          String          @db.VarChar
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamptz(6)
  Club        club          @relation(fields: [clubIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_club_tb_to_club_board_tb")
  GeneralPost generalPost[]

  @@map("club_board_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model clubMember {
  accountIdx Int       @map("account_idx")
  clubIdx    Int       @map("club_idx")
  position   Position
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  Account  account @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_club_member_tb")
  Club     club    @relation(fields: [clubIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_club_tb_to_club_member_tb")

  @@id([accountIdx, clubIdx])
  @@map("club_member_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model club {
  idx              Int               @id @default(autoincrement())
  belongIdx        Int               @map("belong_idx")
  bigCategoryIdx   Int               @map("big_category_idx")
  smallCategoryIdx Int               @map("small_category_idx")
  name             String            @db.VarChar
  summary          String            @db.VarChar
  isRecruit        Boolean           @map("is_recruit")
  profileImg       String            @map("profile_img") @db.VarChar
  bannerImg        String            @map("banner_img") @db.VarChar
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt        DateTime?         @map("deleted_at") @db.Timestamptz(6)
  ClubBoard      clubBoard[]
  ClubMember     clubMember[]
  Belong         belong          @relation(fields: [belongIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_belong_tb_to_club_tb")
  BigCategory    bigCategory     @relation(fields: [bigCategoryIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_big_category_tb_to_club_tb")
  SmallCategory  smallCategory   @relation(fields: [smallCategoryIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_small_category_tb_to_club_tb")
  JoinRequest    joinRequest[]
  NoticePost     noticePost[]
  PromotionPost  promotionPost[]

  @@map("club_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comment {
  idx        Int       @id @default(autoincrement())
  postIdx    Int       @map("post_idx")
  accountIdx Int       @map("account_idx")
  content    String
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  Account  account @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_comment_tb")
  Post     post    @relation(fields: [postIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_comment_tb")
  Reply    reply[]

  @@map("comment_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model generalPost {
  postIdx     Int         @map("post_idx")
  boardIdx    Int         @map("board_idx")
  ClubBoard clubBoard @relation(fields: [boardIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_club_board_tb_to_general_post_tb")
  Post      post      @relation(fields: [postIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_general_post_tb")

  @@id([postIdx, boardIdx])
  @@map("general_post_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model joinRequest {
  accountIdx Int       @map("account_idx")
  clubIdx    Int       @map("club_idx")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  Account  account @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_join_request_tb")
  Club     club    @relation(fields: [clubIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_club_tb_to_join_request_tb")

  @@id([accountIdx, clubIdx])
  @@map("join_request_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model major {
  idx            Int              @id @db.SmallInt
  name           String           @db.VarChar
  AccountMajor accountMajor[]

  @@map("major_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model noticePost {
  postIdx Int     @map("post_idx")
  clubIdx Int     @map("club_idx")
  isFixed Boolean @default(false) @map("is_fixed")
  Club  club  @relation(fields: [clubIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_club_tb_to_notice_post_tb")
  Post  post  @relation(fields: [postIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_notice_post_tb")

  @@id([postIdx, clubIdx])
  @@map("notice_post_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model postImg {
  idx     Int    @id @default(autoincrement())
  postIdx Int    @map("post_idx")
  url     String
  Post  post @relation(fields: [postIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_post_img_tb")

  @@map("post_img_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post {
  idx             Int               @id @default(autoincrement())
  accountIdx      Int               @map("account_idx")
  type            PostType
  title           String            @db.VarChar
  content         String
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamptz(6)
  Comment       comment[]
  GeneralPost   generalPost[]
  NoticePost    noticePost[]
  PostImg       postImg[]
  Account       account         @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_post_tb")
  PromotionPost promotionPost[]

  @@map("post_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model promotionPost {
  postIdx Int    @map("post_idx")
  clubIdx Int    @map("club_idx")
  Club  club @relation(fields: [clubIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_club_tb_to_promotion_post_tb")
  Post  post @relation(fields: [postIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_promotion_post_tb")

  @@id([postIdx, clubIdx])
  @@map("promotion_post_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reply {
  idx        Int       @id @default(autoincrement())
  commentIdx Int       @map("comment_idx")
  accountIdx Int       @map("account_idx")
  content    String
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  Account  account @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_reply_tb")
  Comment  comment @relation(fields: [commentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_comment_tb_to_reply_tb")

  @@map("reply_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model smallCategory {
  idx    Int      @id @default(autoincrement())
  name   String   @db.VarChar
  Club club[]

  @@map("small_category_tb")
}

// 동아리 직급
enum Position {
  // 회장
  MANAGER

  // 부원
  MEMBER
}

// 게시글 종류
enum PostType {
  // 일반
  GENERAL

  // 공지
  NOTICE

  // 홍보
  PROMOTION
}